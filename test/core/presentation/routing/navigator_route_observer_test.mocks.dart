// Mocks generated by Mockito 5.3.2 from annotations
// in deliverzler/test/core/presentation/routing/navigator_route_observer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:flutter/scheduler.dart' as _i4;
import 'package:flutter/src/widgets/overlay.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

import 'navigator_route_observer_test.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRouteSettings_0 extends _i1.SmartFake implements _i2.RouteSettings {
  _FakeRouteSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueListenable_1<T> extends _i1.SmartFake
    implements _i3.ValueListenable<T> {
  _FakeValueListenable_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTickerFuture_2 extends _i1.SmartFake implements _i4.TickerFuture {
  _FakeTickerFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Route].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoute<T> extends _i1.Mock implements _i2.Route<T> {
  MockRoute() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RouteSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeRouteSettings_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.RouteSettings);
  @override
  _i3.ValueListenable<String?> get restorationScopeId => (super.noSuchMethod(
        Invocation.getter(#restorationScopeId),
        returnValue: _FakeValueListenable_1<String?>(
          this,
          Invocation.getter(#restorationScopeId),
        ),
      ) as _i3.ValueListenable<String?>);
  @override
  List<_i5.OverlayEntry> get overlayEntries => (super.noSuchMethod(
        Invocation.getter(#overlayEntries),
        returnValue: <_i5.OverlayEntry>[],
      ) as List<_i5.OverlayEntry>);
  @override
  bool get willHandlePopInternally => (super.noSuchMethod(
        Invocation.getter(#willHandlePopInternally),
        returnValue: false,
      ) as bool);
  @override
  _i6.Future<T?> get popped => (super.noSuchMethod(
        Invocation.getter(#popped),
        returnValue: _i6.Future<T?>.value(),
      ) as _i6.Future<T?>);
  @override
  bool get isCurrent => (super.noSuchMethod(
        Invocation.getter(#isCurrent),
        returnValue: false,
      ) as bool);
  @override
  bool get isFirst => (super.noSuchMethod(
        Invocation.getter(#isFirst),
        returnValue: false,
      ) as bool);
  @override
  bool get hasActiveRouteBelow => (super.noSuchMethod(
        Invocation.getter(#hasActiveRouteBelow),
        returnValue: false,
      ) as bool);
  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);
  @override
  void install() => super.noSuchMethod(
        Invocation.method(
          #install,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.TickerFuture didPush() => (super.noSuchMethod(
        Invocation.method(
          #didPush,
          [],
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #didPush,
            [],
          ),
        ),
      ) as _i4.TickerFuture);
  @override
  void didAdd() => super.noSuchMethod(
        Invocation.method(
          #didAdd,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace(_i2.Route<dynamic>? oldRoute) => super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [oldRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i2.RoutePopDisposition> willPop() => (super.noSuchMethod(
        Invocation.method(
          #willPop,
          [],
        ),
        returnValue: _i6.Future<_i2.RoutePopDisposition>.value(
            _i2.RoutePopDisposition.pop),
      ) as _i6.Future<_i2.RoutePopDisposition>);
  @override
  bool didPop(T? result) => (super.noSuchMethod(
        Invocation.method(
          #didPop,
          [result],
        ),
        returnValue: false,
      ) as bool);
  @override
  void didComplete(T? result) => super.noSuchMethod(
        Invocation.method(
          #didComplete,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPopNext(_i2.Route<dynamic>? nextRoute) => super.noSuchMethod(
        Invocation.method(
          #didPopNext,
          [nextRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeNext(_i2.Route<dynamic>? nextRoute) => super.noSuchMethod(
        Invocation.method(
          #didChangeNext,
          [nextRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangePrevious(_i2.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangePrevious,
          [previousRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changedInternalState() => super.noSuchMethod(
        Invocation.method(
          #changedInternalState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changedExternalState() => super.noSuchMethod(
        Invocation.method(
          #changedExternalState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigatorObserverFns].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserverFns extends _i1.Mock
    implements _i7.NavigatorObserverFns {
  MockNavigatorObserverFns() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void routesStackCallBack(List<_i2.Route<dynamic>>? routes) =>
      super.noSuchMethod(
        Invocation.method(
          #routesStackCallBack,
          [routes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onPush(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onPop(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onReplace(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onReplace,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onRemove(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
