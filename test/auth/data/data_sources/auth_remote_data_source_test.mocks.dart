// Mocks generated by Mockito 5.3.2 from annotations
// in deliverzler/test/auth/data/data_sources/auth_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:deliverzler/core/data/network/i_firebase_auth_caller.dart'
    as _i4;
import 'package:deliverzler/core/data/network/i_firebase_firestore_caller.dart'
    as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserCredential_0 extends _i1.SmartFake
    implements _i2.UserCredential {
  _FakeUserCredential_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i2.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_2<T extends Object?> extends _i1.SmartFake
    implements _i3.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_3<T extends Object?> extends _i1.SmartFake
    implements _i3.QuerySnapshot<T> {
  _FakeQuerySnapshot_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_4<T extends Object?> extends _i1.SmartFake
    implements _i3.DocumentReference<T> {
  _FakeDocumentReference_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_5 extends _i1.SmartFake
    implements _i3.SnapshotMetadata {
  _FakeSnapshotMetadata_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IFirebaseAuthCaller].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFirebaseAuthCaller extends _i1.Mock
    implements _i4.IFirebaseAuthCaller {
  MockIFirebaseAuthCaller() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.UserCredential>);
  @override
  _i5.Future<_i2.User> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i5.Future<_i2.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i5.Future<_i2.User>);
  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [IFirebaseFirestoreCaller].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFirebaseFirestoreCaller extends _i1.Mock
    implements _i6.IFirebaseFirestoreCaller {
  MockIFirebaseFirestoreCaller() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> setData({
    required String? path,
    required Map<String, dynamic>? data,
    bool? merge = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setData,
          [],
          {
            #path: path,
            #data: data,
            #merge: merge,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> updateData({
    required String? path,
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateData,
          [],
          {
            #path: path,
            #data: data,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteData({required String? path}) => (super.noSuchMethod(
        Invocation.method(
          #deleteData,
          [],
          {#path: path},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<String> addDataToCollection({
    required String? path,
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDataToCollection,
          [],
          {
            #path: path,
            #data: data,
          },
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<_i3.DocumentSnapshot<Object?>> getData({required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [],
          {#path: path},
        ),
        returnValue: _i5.Future<_i3.DocumentSnapshot<Object?>>.value(
            _FakeDocumentSnapshot_2<Object?>(
          this,
          Invocation.method(
            #getData,
            [],
            {#path: path},
          ),
        )),
      ) as _i5.Future<_i3.DocumentSnapshot<Object?>>);
  @override
  _i5.Future<_i3.QuerySnapshot<Object?>> getCollectionData({
    required String? path,
    _i6.QueryBuilder? queryBuilder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollectionData,
          [],
          {
            #path: path,
            #queryBuilder: queryBuilder,
          },
        ),
        returnValue: _i5.Future<_i3.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_3<Object?>(
          this,
          Invocation.method(
            #getCollectionData,
            [],
            {
              #path: path,
              #queryBuilder: queryBuilder,
            },
          ),
        )),
      ) as _i5.Future<_i3.QuerySnapshot<Object?>>);
  @override
  _i5.Future<void> deleteAllCollectionData({required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllCollectionData,
          [],
          {#path: path},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Stream<_i3.QuerySnapshot<Object?>> collectionStream({
    required String? path,
    _i6.QueryBuilder? queryBuilder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionStream,
          [],
          {
            #path: path,
            #queryBuilder: queryBuilder,
          },
        ),
        returnValue: _i5.Stream<_i3.QuerySnapshot<Object?>>.empty(),
      ) as _i5.Stream<_i3.QuerySnapshot<Object?>>);
  @override
  _i5.Stream<dynamic> documentStream({required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #documentStream,
          [],
          {#path: path},
        ),
        returnValue: _i5.Stream<dynamic>.empty(),
      ) as _i5.Stream<dynamic>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i3.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i3.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_4<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i3.DocumentReference<T>);
  @override
  _i3.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_5(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i3.SnapshotMetadata);
  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);
  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));
  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}
